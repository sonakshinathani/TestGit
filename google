void reArrange(int a[],int n){
    int i=1;
    while(i<n){
        if(((i+1<n && a[i]>=a[i+1]) && a[i]>=a[i-1]) || (a[i]>=a[i-1])){
            continue;
}
else if(((i+1<n && a[i]<a[i+1]) && a[i]>a[i-1])){
    swap(a[i],a[i+1]);
}
else if(((i+1<n && a[i]>a[i+1]) && a[i]<a[i-1]) || a[i]<a[i-1] ){
    swap(a[i],a[i-1]);
}
else if((i+1<n && a[i]<a[i+1]) && a[i]<a[i-1]){
    if(a[i+1]>a[i-1]) swap(a[i],a[i+1]);
    else swap(a[i],a[i-1]);
}
i+=2;
}
return;
}






1578

1 -> 5 -> 7 -> 9 -> null

9
node* Increment(node* n){
    if(n==NULL) return n;
    node* curr = n;
    int i=0,idx=-1;
    while(curr!=NULL){
if(curr->val != 9){
    idx=i;
}
i++;
curr=curr->next;
}
curr = n;
i=0;
if(idx==-1){
    node* tmp = (node*)malloc(sizeof(node));
    tmp->val =1;
    tmp->next = n;
    n = tmp;
return n;
}
while(curr!=NULL){
    if(idx==i){
        curr->val+=1;
}
if(i>idx){
    curr->val=0;
}
i++;
curr=curr->next;
}
return n;
}


